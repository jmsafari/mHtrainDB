angular.module("templates",[]).run(["$templateCache",function($templateCache){$templateCache.put("multiple-autocomplete-tpl.html","<div class=\"ng-ms form-item-container\" event-focus=\"click\" event-focus-id=\"emailbox\">\r\n    <ul class=\"list-inline\">\r\n        <li ng-repeat=\"item in modelArr\">\r\n			<span ng-if=\"objectProperty == undefined || objectProperty == \'\'\">\r\n			<b>{{item}}</b> <span class=\"remove\" ng-click=\"removeAddedValues(item)\">\r\n                <i class=\"step fi-x\" style=\"color:red;\"></i></span>&nbsp;\r\n			</span>\r\n            <span ng-if=\"objectProperty != undefined && objectProperty != \'\'\">\r\n				<b>{{item[objectProperty]}}</b> <span class=\"remove\" ng-click=\"removeAddedValues(item)\">\r\n                <i class=\"step fi-x\" style=\"color:red;\"></i></span>&nbsp;\r\n			</span>\r\n        </li>\r\n        <li>\r\n            <input id=\"emailbox\" name=\"{{name}}\" style=\"font-weight:bold;padding-left:4px;border:#fff;box-shadow:0 1px 1px #fff;\" ng-model=\"inputValue\" placeholder=\"\" ng-keydown=\"keyParser($event)\"\r\n                   err-msg-required=\"{{errMsgRequired}}\"\r\n                   ng-focus=\"onFocus()\" ng-blur=\"onBlur()\" ng-required=\"!modelArr.length && isRequired\"\r\n    ng-change=\"onChange()\">\r\n        </li>\r\n    </ul>\r\n</div>\r\n<div class=\"autocomplete-list\" ng-show=\"filteredSuggestionArr.length>0 && (inputValue!==\'\' && inputValue!==undefined) && (isFocused || isHover)\" ng-mouseenter=\"onMouseEnter()\" ng-mouseleave=\"onMouseLeave()\">\r\n    <ul ng-if=\"objectProperty == undefined || objectProperty == \'\'\">\r\n        <li ng-class=\"{\'autocomplete-active\' : selectedItemIndex == $index}\"\r\n            ng-repeat=\"suggestion in filteredSuggestionArr\"\r\n            ng-click=\"onSuggestedItemsClick(suggestion)\" ng-mouseenter=\"mouseEnterOnItem($index)\">\r\n            <b>{{suggestion}}</b>\r\n        </li>\r\n    </ul>\r\n    <ul ng-if=\"objectProperty != undefined && objectProperty != \'\'\">\r\n        <li ng-class=\"{\'autocomplete-active\' : selectedItemIndex == $index}\"\r\n            ng-repeat=\"suggestion in filteredSuggestionArr\"\r\n            ng-click=\"onSuggestedItemsClick(suggestion)\" ng-mouseenter=\"mouseEnterOnItem($index)\">\r\n            <b>{{suggestion[objectProperty]}}</b>\r\n        </li>\r\n    </ul>\r\n</div>");}]);(function(){angular.module('multipleSelect',['templates']).config(function(){});})();(function(){angular.module('multipleSelect').directive('multipleAutocomplete',['$filter','$http',function($filter,$http){return{restrict:'EA',scope:{suggestionsArr:'=',modelArr:'=ngModel',apiUrl:'@'},templateUrl:'multiple-autocomplete-tpl.html',link:function(scope,element,attr){scope.objectProperty=attr.objectProperty;scope.selectedItemIndex=0;scope.name=attr.name;scope.isRequired=attr.required;scope.errMsgRequired=attr.errMsgRequired;scope.isHover=false;scope.isFocused=false;var getSuggestionsList=function(){var url=scope.apiUrl;$http({method:'GET',url:url}).then(function(response){scope.suggestionsArr=response.data;},function(response){console.log("*****Angular-multiple-select **** ----- Unable to fetch list");});};if(scope.suggestionsArr==null||scope.suggestionsArr==""){if(scope.apiUrl!=null&&scope.apiUrl!="")
getSuggestionsList();else{console.log("*****Angular-multiple-select **** ----- Please provide suggestion array list or url");}}
if(scope.modelArr==null||scope.modelArr==""){scope.modelArr=[];}
scope.onFocus=function(){scope.isFocused=true;};scope.onMouseEnter=function(){scope.isHover=true};scope.onMouseLeave=function(){scope.isHover=false;};scope.onBlur=function(){scope.isFocused=false;};scope.onChange=function(){scope.selectedItemIndex=0;scope.filteredSuggestionArr=$filter('filter')(scope.suggestionsArr,scope.inputValue);scope.filteredSuggestionArr=$filter('filter')(scope.filteredSuggestionArr,scope.alreadyAddedValues);};scope.keyParser=function($event){var keys={38:'up',40:'down',8:'backspace',13:'enter',9:'tab',27:'esc'};var key=keys[$event.keyCode];if(key=='backspace'&&scope.inputValue==""){if(scope.modelArr.length!=0)
scope.modelArr.pop();}
else if(key=='down'){scope.filteredSuggestionArr=$filter('filter')(scope.suggestionsArr,scope.inputValue);scope.filteredSuggestionArr=$filter('filter')(scope.filteredSuggestionArr,scope.alreadyAddedValues);if(scope.selectedItemIndex<scope.filteredSuggestionArr.length-1)
scope.selectedItemIndex++;}
else if(key=='up'&&scope.selectedItemIndex>0){scope.selectedItemIndex--;}
else if(key=='esc'){scope.isHover=false;scope.isFocused=false;}
else if(key=='enter'){scope.filteredSuggestionArr=$filter('filter')(scope.suggestionsArr,scope.inputValue);scope.filteredSuggestionArr=$filter('filter')(scope.filteredSuggestionArr,scope.alreadyAddedValues);if(scope.selectedItemIndex<scope.filteredSuggestionArr.length)
scope.onSuggestedItemsClick(scope.filteredSuggestionArr[scope.selectedItemIndex]);}};scope.onSuggestedItemsClick=function(selectedValue){scope.modelArr.push(selectedValue);scope.inputValue="";if(scope.modelArr.length==scope.suggestionsArr.length){scope.isHover=false;scope.isFocused=false;}else{scope.isHover=true;scope.isFocused=true;}};var isDuplicate=function(arr,item){var duplicate=false;if(arr==null||arr=="")
return duplicate;for(var i=0;i<arr.length;i++){duplicate=angular.equals(arr[i],item);if(duplicate)
break;}
return duplicate;};scope.alreadyAddedValues=function(item){var isAdded=true;isAdded=!isDuplicate(scope.modelArr,item);return isAdded;};scope.removeAddedValues=function(item){if(scope.modelArr!=null&&scope.modelArr!=""){var itemIndex=scope.modelArr.indexOf(item);if(itemIndex!=-1)
scope.modelArr.splice(itemIndex,1);}};scope.mouseEnterOnItem=function(index){scope.selectedItemIndex=index;};}};}]);})();